{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Задание 1\n// Обработка цепочки промисов с `async/await`\n// Создайте несколько функций, которые возвращают промисы с разным временем выполнения.\n// Напишите функцию, которая вызывает эти промисы поочерёдно, используя `await`, и обрабатывает результаты каждой операции.\n// Убедитесь, что цепочка промисов выполняется последовательно.\n\nfunction task1(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve('Задание A выполнено'), 1000);\n  });\n}\n\nfunction task2(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve('Задание B выполнено'), 2000);\n  });\n}\n\nfunction task3(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve('Задание C выполнено'), 3000);\n  });\n}\n\nasync function runAllTasks(): Promise<void> {\n  const resultA = await task1();\n  console.log(resultA);\n\n  const resultB = await task2();\n  console.log(resultB);\n\n  const resultC = await task3();\n  console.log(resultC);\n\n  console.log('Все задания выполнены');\n}\n\nrunAllTasks();\n\n// Задание 2\n// Асинхронная обработка данных из массива\n// Напишите функцию, которая принимает массив строк.\n// Каждая строка будет асинхронно обрабатываться (например, преобразовываться в верхний регистр с задержкой).\n// Используйте `Promise.all` для выполнения всех операций параллельно и вывода всех результатов.\n\nfunction processString(str: string): Promise<string> {\n  return new Promise((resolve) => {\n    const delay = Math.floor(Math.random() * 2000) + 500;\n    setTimeout(() => resolve(str.toUpperCase()), delay);\n  });\n}\n\nasync function processArray(strings: string[]): Promise<void> {\n  const results = await Promise.all(strings.map(processString));\n  console.log(results);\n}\n\nprocessArray(['hello', 'world', 'typescript', 'async']);\n\n// Задание 3\n// Обработка ошибки в параллельных промисах\n// Напишите функцию, которая вызывает три промиса параллельно с помощью `Promise.all`.\n// Один из промисов должен намеренно завершиться с ошибкой через `reject`.\n// Обработайте эту ошибку с использованием `try/catch` и выведите соответствующее сообщение.\n\nfunction promise1(): Promise<string> {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve('First promise'), 1000)\n  );\n}\n\nfunction promise2(): Promise<string> {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve('Second promise'), 2000)\n  );\n}\n\nfunction promise3(): Promise<string> {\n  return new Promise((_, reject) =>\n    setTimeout(() => reject(new Error('Third promise')), 3000)\n  );\n}\n\nasync function runAllPromises(): Promise<void> {\n  try {\n    const results = await Promise.all([promise1(), promise2(), promise3()]);\n    console.log('Все результаты:', results);\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error('Произошла ошибка:', error.message);\n    } else {\n      console.error('Неизвестная ошибка:', error);\n    }\n  }\n}\n\nrunAllPromises();\n\n//Задание 4\n// Асинхронная функция с динамическим временем выполнения\n// Напишите асинхронную функцию, которая принимает массив чисел.\n// Для каждого числа создайте промис, который будет завершаться через количество миллисекунд, равное значению числа.\n// Используйте `Promise.all` для ожидания завершения всех промисов и вывода результатов в консоль.\n\nfunction delayWithValue(ms: number): Promise<number> {\n  return new Promise((resolve) => setTimeout(() => resolve(ms), ms));\n}\n\nasync function processNumbers(nums: number[]): Promise<void> {\n  const results = await Promise.all(nums.map(delayWithValue));\n  console.log('Все промисы отработали:', results);\n}\n\nprocessNumbers([500, 1500, 1000, 2000]);\n"]}